before_script:
  - cp $CI_SERVER_TLS_CA_FILE /usr/local/share/ca-certificates/
  - update-ca-certificates

cache: &cache
  untracked: false

.tags-defaults-docker: &tags-defaults-docker
  - shared

variables:
  TEMP_IMAGE: ci-build/$CI_PROJECT_PATH:$CI_PIPELINE_ID
  TEMP_IMAGE_PATH: build/image.tar
  META_PATH: build/metadata
  META_ALPINE_VERSION: $META_PATH/alpine-version.txt
  ALPINE_MIRROR_BASE: http://dl-cdn.alpinelinux.org
  VERSION_TOOL_REPOSITORY: https://github.com/xelan/bash-version-tool.git

stages:
  - build
  - test
  - release

build:
  stage: build
  image: $CI_REGISTRY/docker/docker:20
  cache:
    <<: *cache
  artifacts:
    expire_in: 1 hour
    paths:
      - $TEMP_IMAGE_PATH
  services:
    - name: $CI_REGISTRY/docker/docker:20-dind
      alias: docker
  script:
    - echo $CI_COMMIT_REF_NAME > ALPINE_BUILD
    - cp $CI_SERVER_TLS_CA_FILE TLS_CA_FILE
    - docker build --tag $TEMP_IMAGE . --build-arg ALPINE_MIRROR_BASE
    - mkdir -p build
    - docker save --output $TEMP_IMAGE_PATH $TEMP_IMAGE
  tags: *tags-defaults-docker

test:
  stage: test
  image: $CI_REGISTRY/docker/docker:20
  artifacts:
    expire_in: 1 hour
    paths:
      - $META_PATH
  services:
    - name: $CI_REGISTRY/docker/docker:20-dind
      alias: docker
  script:
    - mkdir -p $META_PATH
    - docker load --input $TEMP_IMAGE_PATH --quiet
    - docker run $TEMP_IMAGE sh -c 'grep "Europe/Vienna" /etc/TZ'
    - docker run $TEMP_IMAGE sh -c '[ "$(readlink /etc/localtime)" == "/usr/share/zoneinfo/Europe/Vienna" ]'
    - docker run $TEMP_IMAGE sh -c 'apk info bash && apk info curl && apk info nano && apk info openssl'
    - docker run -e ALPINE_MIRROR_BASE $TEMP_IMAGE sh -c 'echo $(apk policy bash) | grep "$ALPINE_MIRROR_BASE"'
    - docker run --rm $TEMP_IMAGE sh -c 'cat /etc/alpine-release' > $META_ALPINE_VERSION
  tags: *tags-defaults-docker

release:
  stage: release
  image: $CI_REGISTRY/docker/docker:20
  services:
    - name: $CI_REGISTRY/docker/docker:20-dind
      alias: docker
  only:
    - /^[0-9]+\.[0-9]+\.[0-9]+$/
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load --input $TEMP_IMAGE_PATH --quiet
    - docker tag $TEMP_IMAGE $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - apk add --no-cache bash git;
      git clone "$VERSION_TOOL_REPOSITORY" /tmp/version;
      VERSIONS="$(git tag --list)";
      MAJOR=$(bash /tmp/version/version.sh $CI_COMMIT_REF_NAME MAJOR);
      if [ -z "$VERSIONS" ] || [ $(bash /tmp/version/versionhighest.sh "$VERSIONS" $CI_COMMIT_REF_NAME) == 'YES' ]; then
        docker tag $TEMP_IMAGE $CI_REGISTRY_IMAGE:alpine$(cat $META_ALPINE_VERSION | tr -d '\n');
        docker tag $TEMP_IMAGE $CI_REGISTRY_IMAGE:latest;
      fi;
      VERSIONS_MAJOR=$(echo "$VERSIONS" | grep -E "^$MAJOR\." || echo '');
      if [ -z "$VERSIONS_MAJOR" ] || [ $(bash /tmp/version/versionhighest.sh "$VERSIONS_MAJOR" $CI_COMMIT_REF_NAME) == 'YES' ]; then
        docker tag $TEMP_IMAGE $CI_REGISTRY_IMAGE:v$MAJOR;
      fi;

    - docker push --all-tags $CI_REGISTRY_IMAGE
  tags: *tags-defaults-docker
